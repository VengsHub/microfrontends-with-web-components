<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="88" failures="0" errors="0" time="11.332">
  <testsuite name="IdentityBarComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:39" time="2.219" tests="1">
    <testcase classname="IdentityBarComponent should create" name="IdentityBarComponent should create" time="0.264">
    </testcase>
  </testsuite>
  <testsuite name="ErrorComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:42" time="0.339" tests="1">
    <testcase classname="ErrorComponent should create" name="ErrorComponent should create" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="AppComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:42" time="0.29" tests="2">
    <testcase classname="AppComponent should only initialise configurableWidgets when *starting* configure mode" name="AppComponent should only initialise configurableWidgets when *starting* configure mode" time="0.041">
    </testcase>
    <testcase classname="AppComponent should clear configurable widgets and set configure mode to false on save" name="AppComponent should clear configurable widgets and set configure mode to false on save" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="ErrorService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:42" time="0.234" tests="2">
    <testcase classname="ErrorService should be created" name="ErrorService should be created" time="0.008">
    </testcase>
    <testcase classname="ErrorService should update message" name="ErrorService should update message" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DataService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:43" time="0.22" tests="2">
    <testcase classname="DataService should be created" name="DataService should be created" time="0.004">
    </testcase>
    <testcase classname="DataService should call http get on intervalTimer$ usage" name="DataService should call http get on intervalTimer$ usage" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="WidgetOverviewComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:43" time="1.581" tests="3">
    <testcase classname="WidgetOverviewComponent should create" name="WidgetOverviewComponent should create" time="0.041">
    </testcase>
    <testcase classname="WidgetOverviewComponent should automatically trigger groupWidgetsByUsage() on set configurableWidgets" name="WidgetOverviewComponent should automatically trigger groupWidgetsByUsage() on set configurableWidgets" time="0.013">
    </testcase>
    <testcase classname="WidgetOverviewComponent should split widgets into newWidgets and widgetsInUse" name="WidgetOverviewComponent should split widgets into newWidgets and widgetsInUse" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="SortPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:45" time="0.161" tests="1">
    <testcase classname="SortPipe should sort widgets correctly" name="SortPipe should sort widgets correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DragAndDropService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:45" time="0.244" tests="25">
    <testcase classname="DragAndDropService should be created" name="DragAndDropService should be created" time="0.004">
    </testcase>
    <testcase classname="DragAndDropService should set occupiedPositionsOnGrid, dragSource and dragTarget after 1ms on drag start" name="DragAndDropService should set occupiedPositionsOnGrid, dragSource and dragTarget after 1ms on drag start" time="0.007">
    </testcase>
    <testcase classname="DragAndDropService should calculate offset correctly" name="DragAndDropService should calculate offset correctly" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should set offset to middle if widget came from overview" name="DragAndDropService should set offset to middle if widget came from overview" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should not calculate offset on resize" name="DragAndDropService should not calculate offset on resize" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should update position if widget is moved too fast " name="DragAndDropService should update position if widget is moved too fast " time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should handle edge case - most left row" name="DragAndDropService should handle edge case - most left row" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should handle edge case - top row" name="DragAndDropService should handle edge case - top row" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should handle edge case - most right row" name="DragAndDropService should handle edge case - most right row" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should update dragTarget but not dragSource when hovering over available position" name="DragAndDropService should update dragTarget but not dragSource when hovering over available position" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should move widget in dashboard" name="DragAndDropService should move widget in dashboard" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should add new widget to dashboard" name="DragAndDropService should add new widget to dashboard" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should reset drag state" name="DragAndDropService should reset drag state" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should reset ongoing drag data if leaving browser window" name="DragAndDropService should reset ongoing drag data if leaving browser window" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should resume to dragging state if enter browser window again with drag target" name="DragAndDropService should resume to dragging state if enter browser window again with drag target" time="0.005">
    </testcase>
    <testcase classname="DragAndDropService should move other widget down" name="DragAndDropService should move other widget down" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should move other widget right" name="DragAndDropService should move other widget right" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should move other widget left" name="DragAndDropService should move other widget left" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should move multiple widgets out of the way" name="DragAndDropService should move multiple widgets out of the way" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should move widgets back once original position is free" name="DragAndDropService should move widgets back once original position is free" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should move widgets back one position at a time" name="DragAndDropService should move widgets back one position at a time" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should validly make a widget bigger" name="DragAndDropService should validly make a widget bigger" time="0.003">
    </testcase>
    <testcase classname="DragAndDropService should validly make a widget smaller" name="DragAndDropService should validly make a widget smaller" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should not resize because grid columns are maximum 8" name="DragAndDropService should not resize because grid columns are maximum 8" time="0.002">
    </testcase>
    <testcase classname="DragAndDropService should not resize because of overlap" name="DragAndDropService should not resize because of overlap" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="WidgetComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:45" time="0.227" tests="1">
    <testcase classname="WidgetComponent should create" name="WidgetComponent should create" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="RestWidgetsService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:45" time="0.211" tests="5">
    <testcase classname="RestWidgetsService should be created" name="RestWidgetsService should be created" time="0.006">
    </testcase>
    <testcase classname="RestWidgetsService getAvailableWidgets should return 200" name="RestWidgetsService getAvailableWidgets should return 200" time="0.003">
    </testcase>
    <testcase classname="RestWidgetsService getAvailableWidgets should return empty array when 404" name="RestWidgetsService getAvailableWidgets should return empty array when 404" time="0.003">
    </testcase>
    <testcase classname="RestWidgetsService getDashboardWidgets should return 200" name="RestWidgetsService getDashboardWidgets should return 200" time="0.003">
    </testcase>
    <testcase classname="RestWidgetsService save should return 200" name="RestWidgetsService save should return 200" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="NotificationService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:45" time="0.244" tests="5">
    <testcase classname="NotificationService should be created" name="NotificationService should be created" time="0.005">
    </testcase>
    <testcase classname="NotificationService should test &quot;showSuccessToast&quot; method" name="NotificationService should test &quot;showSuccessToast&quot; method" time="0.013">
    </testcase>
    <testcase classname="NotificationService should test &quot;showWarningToast&quot; method" name="NotificationService should test &quot;showWarningToast&quot; method" time="0.004">
    </testcase>
    <testcase classname="NotificationService should test &quot;showWarningBanner&quot; method" name="NotificationService should test &quot;showWarningBanner&quot; method" time="0.004">
    </testcase>
    <testcase classname="NotificationService should test &quot;showErrorBanner&quot; method" name="NotificationService should test &quot;showErrorBanner&quot; method" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="DropDownComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:46" time="0.447" tests="3">
    <testcase classname="DropDownComponent should create" name="DropDownComponent should create" time="0.011">
    </testcase>
    <testcase classname="DropDownComponent should toggle item correctly" name="DropDownComponent should toggle item correctly" time="0.004">
    </testcase>
    <testcase classname="DropDownComponent should reset selection" name="DropDownComponent should reset selection" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="WidgetSizePreviewComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:46" time="0.212" tests="4">
    <testcase classname="WidgetSizePreviewComponent should create" name="WidgetSizePreviewComponent should create" time="0.013">
    </testcase>
    <testcase classname="WidgetSizePreviewComponent should create empty array" name="WidgetSizePreviewComponent should create empty array" time="0.008">
    </testcase>
    <testcase classname="WidgetSizePreviewComponent should create full array" name="WidgetSizePreviewComponent should create full array" time="0.007">
    </testcase>
    <testcase classname="WidgetSizePreviewComponent should create correct array" name="WidgetSizePreviewComponent should create correct array" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="GridComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:46" time="0.213" tests="1">
    <testcase classname="GridComponent should remove widget based on position" name="GridComponent should remove widget based on position" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="PatientInfoComponent" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:47" time="0.186" tests="1">
    <testcase classname="PatientInfoComponent should create" name="PatientInfoComponent should create" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="SafeUrlPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:47" time="0.18" tests="1">
    <testcase classname="SafeUrlPipe create an instance" name="SafeUrlPipe create an instance" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="SynchronisationService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:47" time="0.185" tests="2">
    <testcase classname="SynchronisationService should be created" name="SynchronisationService should be created" time="0.004">
    </testcase>
    <testcase classname="SynchronisationService should call http get on intervalTimer$ usage" name="SynchronisationService should call http get on intervalTimer$ usage" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="FeatureService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:47" time="0.18" tests="2">
    <testcase classname="FeatureService should be created" name="FeatureService should be created" time="0.004">
    </testcase>
    <testcase classname="FeatureService should set featureList on initialization" name="FeatureService should set featureList on initialization" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="isVisibleFeaturePipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:47" time="0.202" tests="1">
    <testcase classname="isVisibleFeaturePipe should only return true if the feature name is in the list" name="isVisibleFeaturePipe should only return true if the feature name is in the list" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="MsalConfigService" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:48" time="0.328" tests="4">
    <testcase classname="MsalConfigService should be created" name="MsalConfigService should be created" time="0.008">
    </testcase>
    <testcase classname="MsalConfigService should return clientId for authentication" name="MsalConfigService should return clientId for authentication" time="0.005">
    </testcase>
    <testcase classname="MsalConfigService should return the whole config" name="MsalConfigService should return the whole config" time="0.005">
    </testcase>
    <testcase classname="MsalConfigService should return error" name="MsalConfigService should return error" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="FilterByTopicsPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:48" time="0.285" tests="2">
    <testcase classname="FilterByTopicsPipe should return all widgets when searchTerm is empty" name="FilterByTopicsPipe should return all widgets when searchTerm is empty" time="0.001">
    </testcase>
    <testcase classname="FilterByTopicsPipe should filter widgets correctly" name="FilterByTopicsPipe should filter widgets correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PreviewPositionPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:48" time="0.16" tests="1">
    <testcase classname="PreviewPositionPipe should only return true if position is hovered over by widget" name="PreviewPositionPipe should only return true if position is hovered over by widget" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AgePipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:48" time="0.164" tests="4">
    <testcase classname="AgePipe should return age" name="AgePipe should return age" time="0.002">
    </testcase>
    <testcase classname="AgePipe should calculate years" name="AgePipe should calculate years" time="0.001">
    </testcase>
    <testcase classname="AgePipe should calculate months" name="AgePipe should calculate months" time="0.001">
    </testcase>
    <testcase classname="AgePipe should return empty string" name="AgePipe should return empty string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="WidgetsEqual" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.167" tests="2">
    <testcase classname="WidgetsEqual should return true if widgets have same positions" name="WidgetsEqual should return true if widgets have same positions" time="0.002">
    </testcase>
    <testcase classname="WidgetsEqual should return false if widgets have different positions" name="WidgetsEqual should return false if widgets have different positions" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FilterByNamePipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.18" tests="4">
    <testcase classname="FilterByNamePipe should return all widgets when searchTerm is empty" name="FilterByNamePipe should return all widgets when searchTerm is empty" time="0.001">
    </testcase>
    <testcase classname="FilterByNamePipe should filter widgets correctly" name="FilterByNamePipe should filter widgets correctly" time="0.001">
    </testcase>
    <testcase classname="FilterByNamePipe should filter widgets correctly regardless of capitalization" name="FilterByNamePipe should filter widgets correctly regardless of capitalization" time="0.001">
    </testcase>
    <testcase classname="FilterByNamePipe should filter widgets correctly without considering unecessary spaces" name="FilterByNamePipe should filter widgets correctly without considering unecessary spaces" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="IsHoveredPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.168" tests="1">
    <testcase classname="IsHoveredPipe should only return true if position is hovered over by widget" name="IsHoveredPipe should only return true if position is hovered over by widget" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="GridAreaStylesPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.176" tests="1">
    <testcase classname="GridAreaStylesPipe should return grid-area attributes from widget data" name="GridAreaStylesPipe should return grid-area attributes from widget data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GridSlotsPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.192" tests="2">
    <testcase classname="GridSlotsPipe should return enough grid slots for widgets, as well as an extra row" name="GridSlotsPipe should return enough grid slots for widgets, as well as an extra row" time="0.002">
    </testcase>
    <testcase classname="GridSlotsPipe should return at least 6 rows of slots" name="GridSlotsPipe should return at least 6 rows of slots" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GetPositionPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:49" time="0.183" tests="1">
    <testcase classname="GetPositionPipe should return correct row and column of nth-indexed element" name="GetPositionPipe should return correct row and column of nth-indexed element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="IconPipe" errors="0" failures="0" skipped="0" timestamp="2023-03-27T10:43:50" time="0.176" tests="3">
    <testcase classname="IconPipe should return icon src based on active and hovered states" name="IconPipe should return icon src based on active and hovered states" time="0.002">
    </testcase>
    <testcase classname="IconPipe should prioritize active over hovered" name="IconPipe should prioritize active over hovered" time="0.001">
    </testcase>
    <testcase classname="IconPipe should prioritize disabled over hovered and active" name="IconPipe should prioritize disabled over hovered and active" time="0.001">
    </testcase>
  </testsuite>
</testsuites>